import gmpy2
gmpy2.get_context().precision = 4096
from functools import reduce
from Crypto.Util.number import long_to_bytes, bytes_to_long

def chinese_remainder_theorem(items):
    # Determine N, the product of all n_i
    N = 1
    for a, n in items:
        N *= n

    # Find the solution (mod N)
    result = 0
    for a, n in items:
        m = N // n
        r, s, d = extended_gcd(n, m)
        if d != 1:
            raise "Input not pairwise co-prime"
        result += a * s * m

    # Make sure we return the canonical solution.
    return result % N


def extended_gcd(a, b):
    x, y = 0, 1
    lastx, lasty = 1, 0

    while b:
        a, (q, b) = b, divmod(a, b)
        x, lastx = lastx - q * x, x
        y, lasty = lasty - q * y, y

    return (lastx, lasty, a)


def mul_inv(a, b):
    b0 = b
    x0, x1 = 0, 1
    if b == 1:
        return 1
    while a > 1:
        q = a // b
        a, b = b, a % b
        x0, x1 = x1 - q * x0, x0
    if x1 < 0:
        x1 += b0
    return x1

def find_invpow(x,n):
    """Finds the integer component of the n'th root of x,
    an integer such that y ** n <= x < (y + 1) ** n.
    """
    high = 1
    while high ** n < x:
        high *= 2
    low = high//2
    while low < high:
        mid = (low + high) // 2
        if low < mid and mid**n < x:
            low = mid
        elif high > mid and mid**n > x:
            high = mid
        else:
            return mid
    return mid + 1


c1 = 224897270886288407556597319765077056813286970913415429638554724051654778045768418927642196856976884751246530799113713309963516342852014792312170730498185711960733188249122135509740674210748022422133941495570480701173505454977904485265562786295247126935956867401622787757766002169508536903444558493223019990524609351322474264214575678682537082317031900660790868558032352787127827831289752645944340190508037728738848460116946004442453831767624191075968021001280390318266418814048709213473409381139477833236085699661379539882947111571238795776236016597778104594940521736348046070334859779610668280346614046213345866656
n1 = 17915284610072507700652334729114795201206026740456598907957279513495295294574763207474106617052998640486811215986818120259827350904151929138254441622908653236806306686868933061541031745467728784529196193834117720683930083609561817014057948603676263547357015516083015911357906904538149322226313759331149595161890357204610240737005151691932493180100788612249283258069636693706288694989806523301389695041832511707421458993179641577717649901660529260859223502426884971600210533230641771229360570363940973353077440926341955073187768731495185075643446720903008032012519109738814018511974674912250095157530761733796308663403

c2 = 6663877852814296484526040216099130010324907488859840779058449821080414043866224980330602478741070688023388095169157315491986568519483885802776894955715015569682444069254776032617913754507744834567609684854975306246755422195366157474832881734948729331673748744221362416736282799590854716480787411171469932570003528669394568031341948868946282762062564937439270951763260901264756480532349402552516886796738199970349946565124543950587302984262983746451310923033692602215591845522912520896322354180575815195041670805258885837976624214853686775065507164382441317682801417554417183202147736557776920124678903622890978325775
n2 = 18539306643728412516168084304654282073609806774584596350248911898442735792069854712298089667089215239804482295806453477749519703912793090258986785096970293437079056037927972479300422204420274810147016464287389701219478156272988696456978010633026746813800244975030152189698132347412463109647221861750698257978103198907188819655996322807415563141949996594901482257019873575994330824999426781131362649033730435810096113594172307602408532928870997185494282953168561391284846292632627080546603547395466996977546457460093365936832426447286472813254661996501517157042125893842249537522821039943912027462017032116179168213617


C = chinese_remainder_theorem([(c1, n1), (c2, n2)])
flag, found = gmpy2.iroot(C, 17)
if found:
    print(long_to_bytes(flag).decode())
