

# This file was *autogenerated* from the file counting.sage
from sage.all_cmdline import *   # import sage library

_sage_const_0 = Integer(0); _sage_const_2 = Integer(2); _sage_const_1337 = Integer(1337); _sage_const_42 = Integer(42); _sage_const_1 = Integer(1); _sage_const_35 = Integer(35); _sage_const_8 = Integer(8); _sage_const_11 = Integer(11)
from pwn import *
from sage.all import *


def gcd(a, b): 
    while b:
        a, b = b, a % b
    return a.monic()

def franklinreiter(C1, C2, e, N, a, b):
    P = PolynomialRing(Zmod(N), names=('X',)); (X,) = P._first_ngens(1)
    g1 = (a*X + b)**e - C1
    g2 = X**e - C2
    print('Result')
    result = -gcd(g1, g2).coefficients()[_sage_const_0 ]
    return hex(int(result))[_sage_const_2 :]

p = remote('52.59.124.14', '10008')
print(p.recvline())
N = int(p.recvline().decode())
print('N =', N)
e = _sage_const_1337 
flag_len = _sage_const_42 

for i in range(flag_len, _sage_const_0 , -_sage_const_1 ):
    try:
        print(p.recvline())
        c1 = int(p.recvline().decode())
        print('c1 =', c1)
        print(p.recvline())
        p.sendline(b'dummy')
        c2 = int(p.recvline().decode())
        print('c2 =', c2)
        guess = bytes.fromhex(franklinreiter(c2, c1, e, N, _sage_const_1 , _sage_const_2 **((_sage_const_35  + i)*_sage_const_8 ))).split()[_sage_const_11 :]
        to_send = b''
        for i in guess:
            to_send += i
        print(to_send)
        p.sendline(to_send)
    except EOFError:
        exit()

